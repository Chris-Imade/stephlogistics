<!-- Bootstrap from CDN -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script
  src="https://code.jquery.com/jquery-3.7.1.min.js"
  integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
  crossorigin="anonymous"
></script>
<script src="https://cdn.jsdelivr.net/npm/wowjs@1.1.3/dist/wow.min.js"></script>

<!-- Only include the JS files that actually exist in our project -->
<script defer src="/assets/js/magnific-popup.js"></script>
<script defer src="/assets/js/nice-select.js"></script>
<script defer src="/assets/js/swiper.js"></script>
<script defer src="/assets/js/odometer.min.js"></script>
<script defer src="/assets/js/jarallax.min.js"></script>
<script defer src="/assets/js/imagesloaded-pkgd.js"></script>
<script defer src="/assets/js/utils.js"></script>
<script defer src="/assets/js/script.js"></script>

<!-- Payment Scripts -->
<script src="https://js.stripe.com/v3/"></script>
<script>
  window.PAYPAL_HOSTED_BUTTON_ID = "<%= process.env.PAYPAL_HOSTED_BUTTON_ID %>";
</script>
<script src="https://www.paypal.com/sdk/js?client-id=<%= process.env.PAYPAL_CLIENT_ID %>&components=hosted-buttons&disable-funding=venmo&currency=GBP"></script>

<!-- Load shipment form and payment scripts -->
<script src="/assets/js/shipment-form.js" defer></script>
<script src="/assets/js/stripe-payment.js" type="module"></script>
<script src="/assets/js/shipment-select.js" type="module"></script>

<!-- Fix for WOW.js animations -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Wait for the main JavaScript to initialize
    setTimeout(function () {
      // Force all fade-up elements to be visible
      document.querySelectorAll(".fade-up").forEach(function (el) {
        el.style.opacity = "1";
        el.style.visibility = "visible";
        el.style.transform = "translateY(0)";
        el.classList.add("active");
      });

      // Initialize counter animations for the stats
      document.querySelectorAll(".stat-number").forEach(function (counter) {
        const target = parseInt(counter.getAttribute("data-count"), 10);
        if (target) {
          // Set initial value to 0
          counter.textContent = "0";

          // Create animation effect
          let current = 0;
          const increment = target / 50; // Divide animation into 50 steps
          const timer = setInterval(function () {
            current += increment;
            counter.textContent = Math.round(Math.min(current, target));
            if (current >= target) {
              clearInterval(timer);
            }
          }, 30);
        }
      });
    }, 1000); // Give the main JS time to initialize
  });
</script>
<script>
  function submitContactForm() {
    const form = document.getElementById("contactForm");
    const submitButton = document.getElementById("contactSubmitButton");
    const submitText = document.getElementById("contactSubmitText");
    const submitSpinner = document.getElementById("contactSubmitSpinner");
    const errorMessage = document.getElementById("contactErrorMessage");
    const errorText = document.getElementById("contactErrorText");

    // Check form validity
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    // Disable submit button and show spinner
    submitButton.disabled = true;
    submitText.textContent = "Sending...";
    submitSpinner.classList.remove("d-none");
    errorMessage.classList.add("d-none");

    const formData = {
      name: document.getElementById("contactName").value,
      email: document.getElementById("contactEmail").value,
      phone: document.getElementById("contactPhone").value,
      message: document.getElementById("contactMessage").value,
    };

    fetch("/franchise/submit-contact", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // Show toast if available
          if (typeof showToast === "function") {
            showToast("Message sent successfully!", "success");
          }

          // Reset form and close modal
          form.reset();
          bootstrap.Modal.getInstance(
            document.getElementById("contactModal")
          ).hide();
        } else {
          throw new Error(data.message || "Failed to send message");
        }
      })
      .catch((error) => {
        console.error("Error sending message:", error);
        errorText.textContent = error.message || "Error sending message";
        errorMessage.classList.remove("d-none");

        // Show toast if available
        if (typeof showToast === "function") {
          showToast("Error sending message. Please try again.", "error");
        }
      })
      .finally(() => {
        // Re-enable submit button and hide spinner
        submitButton.disabled = false;
        submitText.textContent = "Send Message";
        submitSpinner.classList.add("d-none");
      });
  }
</script>
<script>
  function submitFranchiseForm() {
    const form = document.getElementById("franchiseForm");
    const submitButton = document.getElementById("submitButton");
    const submitText = document.getElementById("submitButtonText");
    const submitSpinner = document.getElementById("submitSpinner");
    const successMessage = document.getElementById("successMessage");
    const errorMessage = document.getElementById("errorMessage");
    const errorText = document.getElementById("errorText");

    // Check form validity
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    // Disable submit button and show spinner
    submitButton.disabled = true;
    submitText.textContent = "Submitting...";
    submitSpinner.classList.remove("d-none");
    errorMessage.classList.add("d-none");
    successMessage.classList.add("d-none");

    const formData = {
      firstName: document.getElementById("firstName").value,
      lastName: document.getElementById("lastName").value,
      email: document.getElementById("email").value,
      phone: document.getElementById("phone").value,
      location: document.getElementById("location").value,
      investment: document.getElementById("investment").value,
      experience: document.getElementById("experience").value,
      timeline: document.getElementById("timeline").value,
    };

    fetch("/franchise/submit-application", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // Show success message
          successMessage.classList.remove("d-none");

          // Show toast if available
          if (typeof showToast === "function") {
            showToast("Application submitted successfully!", "success");
          }

          // Reset form
          form.reset();
        } else {
          throw new Error(data.message || "Failed to submit application");
        }
      })
      .catch((error) => {
        console.error("Error submitting application:", error);
        errorText.textContent = error.message || "Error submitting application";
        errorMessage.classList.remove("d-none");

        // Show toast if available
        if (typeof showToast === "function") {
          showToast("Error submitting application. Please try again.", "error");
        }
      })
      .finally(() => {
        // Re-enable submit button and hide spinner
        submitButton.disabled = false;
        submitText.textContent = "Submit Application";
        submitSpinner.classList.add("d-none");
      });
  }
</script>
<script>
  function submitShipmentForm() {
    console.log("Direct submit function called");

    // Hide step 5
    const step5 = document.getElementById("step-5");
    if (step5) step5.style.display = "none";

    // Show payment processing
    const processingUI = document.getElementById("payment-processing");
    if (processingUI) processingUI.style.display = "block";

    // Update button state
    const submitBtn = document.getElementById("btn-submit");
    const submitText = document.getElementById("submit-text");
    const submitSpinner = document.getElementById("submit-spinner");

    if (submitBtn && submitText && submitSpinner) {
      submitBtn.disabled = true;
      submitText.style.opacity = "0.6";
      submitSpinner.style.display = "inline-block";
    }

    // Simulate payment processing
    const progressBar = document.getElementById("payment-progress-bar");
    let width = 0;

    const interval = setInterval(function () {
      if (width >= 100) {
        clearInterval(interval);

        // Hide processing page
        if (processingUI) processingUI.style.display = "none";

        // Show success page
        const successPage = document.getElementById("payment-success");
        if (successPage) successPage.style.display = "block";

        // Setup finish button
        const finishBtn = document.getElementById("finish-button");
        if (finishBtn) {
          finishBtn.onclick = function () {
            // Hide success page
            successPage.style.display = "none";

            // Show final success message
            const finalSuccess = document.getElementById("success-message");
            if (finalSuccess) finalSuccess.style.display = "block";

            // Set tracking info
            const shipmentId = `SH${Date.now().toString().slice(-10)}`;
            const trackingId = `TR${Date.now().toString().slice(-10)}`;

            document.getElementById("shipment-id").textContent = shipmentId;
            document.getElementById("tracking-number").textContent = trackingId;

            // Update tracking button
            const trackBtn = document.getElementById("track-shipment-btn");
            if (trackBtn) trackBtn.href = `/shipment/track?id=${trackingId}`;
          };
        }
      } else {
        width += 3;
        if (progressBar) progressBar.style.width = width + "%";
      }
    }, 100);

    return false;
  }

  // Add event listener to submit button directly
  document.addEventListener("DOMContentLoaded", function () {
    console.log("Direct inline script loaded from main.ejs");

    // Handle submit button
    const submitBtn = document.getElementById("btn-submit");
    if (submitBtn) {
      console.log("Adding direct event listener to submit button");
      submitBtn.onclick = submitShipmentForm;
    } else {
      console.error("Submit button not found by direct script");
    }

    // Fix for shipping options selection
    const shippingOptions = document.querySelectorAll(".shipping-option");
    if (shippingOptions.length > 0) {
      console.log(
        `Found ${shippingOptions.length} shipping options - adding event listeners`
      );

      shippingOptions.forEach((option) => {
        option.addEventListener("click", function () {
          console.log(
            "Shipping option clicked:",
            this.getAttribute("data-option")
          );

          // Get the radio button inside this option
          const radio = this.querySelector('input[type="radio"]');
          if (radio) {
            radio.checked = true;
            console.log("Radio selected:", radio.value);

            // Update visual selection
            shippingOptions.forEach((opt) => opt.classList.remove("selected"));
            this.classList.add("selected");

            // Update order summary if we're on step 5
            const step5 = document.getElementById("step-5");
            if (step5 && step5.classList.contains("active")) {
              try {
                updateOrderSummary();
              } catch (e) {
                console.error("Error updating order summary:", e);
              }
            }
          } else {
            console.error("Radio input not found in shipping option");
          }
        });
      });

      // Add initial selection to first option
      if (shippingOptions[0]) {
        const firstRadio = shippingOptions[0].querySelector(
          'input[type="radio"]'
        );
        if (firstRadio) {
          firstRadio.checked = true;
          shippingOptions[0].classList.add("selected");
        }
      }
    } else {
      console.log("No shipping options found on this page");
    }

    // Also add handlers for payment methods
    const paymentMethods = document.querySelectorAll(".payment-method");
    if (paymentMethods.length > 0) {
      console.log(
        `Found ${paymentMethods.length} payment methods - adding event listeners`
      );

      const cardFields = document.getElementById("card-payment-fields");
      const paypalFields = document.getElementById("paypal-payment-fields");

      paymentMethods.forEach((method) => {
        method.addEventListener("click", function () {
          console.log(
            "Payment method clicked:",
            this.getAttribute("data-method")
          );

          // Get the radio button inside this method
          const radio = this.querySelector('input[type="radio"]');
          if (radio) {
            radio.checked = true;

            // Update visual selection
            paymentMethods.forEach((m) => m.classList.remove("selected"));
            this.classList.add("selected");

            // Show/hide appropriate fields
            if (cardFields && paypalFields) {
              const methodType = this.getAttribute("data-method");
              if (methodType === "card") {
                cardFields.style.display = "block";
                paypalFields.style.display = "none";
              } else if (methodType === "paypal") {
                cardFields.style.display = "none";
                paypalFields.style.display = "block";
              }
            }
          }
        });
      });

      // Add initial selection to first payment method
      if (paymentMethods[0]) {
        paymentMethods[0].classList.add("selected");
      }
    }

    // Add handler for insurance checkbox
    const insuranceCheckbox = document.getElementById("insurance");
    const insuranceValueGroup = document.getElementById(
      "insurance-value-group"
    );

    if (insuranceCheckbox && insuranceValueGroup) {
      insuranceCheckbox.addEventListener("change", function () {
        insuranceValueGroup.classList.toggle("hidden", !this.checked);

        // Update order summary if we're on step 5
        const step5 = document.getElementById("step-5");
        if (step5 && step5.classList.contains("active")) {
          try {
            updateOrderSummary();
          } catch (e) {
            console.error("Error updating order summary:", e);
          }
        }
      });
    }

    // Add handler for same-as-origin checkbox
    const sameAsOriginCheckbox = document.getElementById("same-as-origin");
    const destinationFields = document.getElementById(
      "destination-address-fields"
    );

    if (sameAsOriginCheckbox && destinationFields) {
      sameAsOriginCheckbox.addEventListener("change", function () {
        destinationFields.style.display = this.checked ? "none" : "block";

        if (this.checked) {
          // Copy values from origin to destination
          document.getElementById("destination-address").value =
            document.getElementById("origin-address").value;
          document.getElementById("destination-city").value =
            document.getElementById("origin-city").value;
          document.getElementById("destination-postal-code").value =
            document.getElementById("origin-postal-code").value;
          document.getElementById("destination-state").value =
            document.getElementById("origin-state").value;
          document.getElementById("destination-country").value =
            document.getElementById("origin-country").value;
        }
      });
    }
  });

  // Helper function for Order Summary
  function updateOrderSummary() {
    console.log("Updating order summary");

    // Get selected shipping method
    const selectedShipping = document.querySelector(
      'input[name="shipping-method"]:checked'
    );
    if (!selectedShipping) {
      console.log("No shipping method selected");
      return;
    }

    const shippingMethod = selectedShipping.value;
    const shippingPrice =
      parseFloat(selectedShipping.getAttribute("data-price")) || 0;

    // Calculate additional costs
    const saturdayDelivery =
      document.getElementById("saturday-delivery")?.checked;
    const saturdayPrice = saturdayDelivery ? 12.5 : 0;

    // Calculate insurance if checked
    const insurance = document.getElementById("insurance")?.checked;
    let insurancePrice = 0;

    if (insurance) {
      const declaredValue =
        parseFloat(document.getElementById("declared-value")?.value) || 0;
      insurancePrice = declaredValue * 0.02; // 2% of declared value
    }

    // Calculate subtotal and VAT
    const subtotal = shippingPrice + saturdayPrice + insurancePrice;
    const vat = subtotal * 0.2; // 20% VAT
    const total = subtotal + vat;

    // Update summary elements
    document.getElementById("summary-service").textContent =
      shippingMethod.charAt(0).toUpperCase() +
      shippingMethod.slice(1) +
      " Delivery";

    document.getElementById(
      "summary-shipping"
    ).textContent = `£${shippingPrice.toFixed(2)}`;

    // Show/hide Saturday delivery row
    const saturdayRow = document.getElementById("summary-row-saturday");
    if (saturdayRow) {
      saturdayRow.style.display = saturdayDelivery ? "flex" : "none";
    }

    // Show/hide insurance row
    const insuranceRow = document.getElementById("summary-row-insurance");
    if (insuranceRow) {
      insuranceRow.style.display = insurance ? "flex" : "none";
      document.getElementById(
        "summary-insurance"
      ).textContent = `£${insurancePrice.toFixed(2)}`;
    }

    document.getElementById("summary-vat").textContent = `£${vat.toFixed(2)}`;
    document.getElementById("summary-total").textContent = `£${total.toFixed(
      2
    )}`;

    console.log("Order summary updated successfully");
  }
</script>
<script>
  /**
   * Shipment Tracking functionality
   */
  document.addEventListener("DOMContentLoaded", function () {
    const trackingForm = document.getElementById("tracking-form");
    if (!trackingForm) return; // Exit if we're not on the tracking page

    console.log("Tracking form detected");

    const trackingInput = document.getElementById("trackingNumber");
    const resultSection = document.querySelector(".tracking-result-section");
    const submitButton = document.querySelector(".track-button");
    const originalButtonText = submitButton ? submitButton.innerHTML : "Track";

    // Check if an error message exists and show it
    const errorParam = new URLSearchParams(window.location.search).get("error");
    if (errorParam) {
      // Display the error in a toast if available
      if (typeof showToast === "function") {
        showToast(decodeURIComponent(errorParam), "error");
      }
    }

    // If query parameter for tracking exists but no shipment is displayed,
    // show error message for not found
    const trackingParam = new URLSearchParams(window.location.search).get("id");
    if (
      trackingParam &&
      resultSection &&
      resultSection.style.display === "none"
    ) {
      if (typeof showToast === "function") {
        showToast(
          `No shipment found with tracking number ${trackingParam}`,
          "error"
        );
      }
    }

    // Initially hide result section if it exists and we're on the main tracking page
    if (resultSection && !trackingParam) {
      resultSection.style.display = "none";
    }

    // Setup copy buttons if shipment is displayed
    if (document.querySelector(".copy-btn")) {
      const copyButtons = document.querySelectorAll(".copy-btn");
      copyButtons.forEach((button) => {
        button.addEventListener("click", function () {
          const targetId = this.getAttribute("data-clipboard-target");
          const textToCopy = document.querySelector(targetId).textContent;

          navigator.clipboard.writeText(textToCopy).then(() => {
            // Show success feedback
            const originalHTML = this.innerHTML;
            this.innerHTML = '<i class="fa-light fa-check"></i>';
            setTimeout(() => {
              this.innerHTML = originalHTML;
            }, 1500);

            // Show toast if available
            if (typeof showToast === "function") {
              showToast("Copied to clipboard!", "success");
            }
          });
        });
      });
    }

    // Support both AJAX and traditional form submission
    trackingForm.addEventListener("submit", function (e) {
      const trackingNumber = trackingInput.value.trim();

      if (!trackingNumber) {
        trackingInput.classList.add("error");
        if (typeof showToast === "function") {
          showToast("Please enter a tracking number", "error");
        }
        e.preventDefault();
        return;
      }

      // Allow the form to submit normally to the server
      // The server-side route will handle the tracking
      console.log("Form will submit to server:", trackingNumber);

      // Update button state to show loading
      if (submitButton) {
        submitButton.disabled = true;
        const originalHTML = submitButton.innerHTML;
        submitButton.innerHTML =
          '<i class="fa-light fa-spinner fa-spin"></i> Searching...';

        // Set a timeout to restore button state in case submission takes too long
        setTimeout(() => {
          submitButton.disabled = false;
          submitButton.innerHTML = originalHTML;
        }, 5000); // 5 seconds timeout
      }
    });

    // Fix progress bar display if it exists
    const progressInner = document.querySelector(".progress-inner");
    if (progressInner) {
      // Get the status from the status badge if it exists
      const statusBadge = document.querySelector(".status-badge");
      if (statusBadge) {
        const status = statusBadge.classList[1]; // e.g., "in-transit", "pending", etc.

        // Apply width based on status
        if (status === "delivered") {
          progressInner.style.width = "100%";
        } else if (status === "in-transit") {
          progressInner.style.width = "66%";
        } else if (status === "processing") {
          progressInner.style.width = "33%";
        } else if (status === "pending") {
          progressInner.style.width = "15%";
        }
      }
    }

    // If there's an error message in the DOM, make sure it's visible
    const errorMessage = document.querySelector(".error-message");
    if (errorMessage) {
      errorMessage.style.display = "block";

      if (typeof showToast === "function") {
        showToast(errorMessage.textContent, "error");
      }
    }
  });
</script>
<script>
  function submitNewsletterForm(event) {
    event.preventDefault();

    // Get form and elements
    const form = document.getElementById("newsletterForm");
    const email = form.querySelector('input[name="email"]').value.trim();
    const submitBtn = document.getElementById("newsletterSubmitBtn");
    const btnIcon = document.getElementById("newsletterBtnIcon");
    const spinner = document.getElementById("newsletterSpinner");

    // Get feedback elements
    const feedbackContainer = document.getElementById("newsletter-feedback");
    const feedbackMessage = document.getElementById("newsletter-message");
    const successIcon = document.querySelector(".success-icon");
    const errorIcon = document.querySelector(".error-icon");

    // Hide any previous feedback
    feedbackContainer.classList.add("d-none");
    feedbackContainer.classList.remove("success", "error");
    successIcon.classList.add("d-none");
    errorIcon.classList.add("d-none");

    // Validate email
    if (!email) {
      // Show error feedback
      feedbackContainer.classList.remove("d-none");
      feedbackContainer.classList.add("error");
      feedbackMessage.textContent = "Please enter your email address";
      errorIcon.classList.remove("d-none");
      return false;
    }

    // Show spinner
    btnIcon.classList.add("d-none");
    spinner.classList.remove("d-none");
    submitBtn.disabled = true;

    // Send subscription request
    fetch("/newsletter/subscribe", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Reset the form
        form.reset();

        // Show success or error message
        feedbackContainer.classList.remove("d-none");

        if (data.success) {
          feedbackContainer.classList.add("success");
          feedbackMessage.textContent =
            "Thank you for subscribing to our newsletter!";
          successIcon.classList.remove("d-none");
        } else {
          feedbackContainer.classList.add("error");
          feedbackMessage.textContent =
            data.message || "An error occurred. Please try again.";
          errorIcon.classList.remove("d-none");
        }
      })
      .catch((error) => {
        console.error("Newsletter subscription error:", error);

        // Show error message
        feedbackContainer.classList.remove("d-none");
        feedbackContainer.classList.add("error");
        feedbackMessage.textContent =
          "An error occurred while processing your request. Please try again.";
        errorIcon.classList.remove("d-none");
      })
      .finally(() => {
        // Reset button state
        btnIcon.classList.remove("d-none");
        spinner.classList.add("d-none");
        submitBtn.disabled = false;
      });

    return false;
  }
</script>
<script>
  (function () {
    if (!window.chatbase || window.chatbase("getState") !== "initialized") {
      window.chatbase = (...args) => {
        if (!window.chatbase.q) {
          window.chatbase.q = [];
        }
        window.chatbase.q.push(args);
      };
      window.chatbase = new Proxy(window.chatbase, {
        get(target, prop) {
          if (prop === "q") {
            return target.q;
          }
          return (...args) => target(prop, ...args);
        },
      });
    }
    const onLoad = function () {
      const script = document.createElement("script");
      script.src = "https://www.chatbase.co/embed.min.js";
      script.id = "kRCsHAl6IVDOlXyFkd9Re";
      script.domain = "www.chatbase.co";
      document.body.appendChild(script);
    };
    if (document.readyState === "complete") {
      onLoad();
    } else {
      window.addEventListener("load", onLoad);
    }
  })();
</script>
