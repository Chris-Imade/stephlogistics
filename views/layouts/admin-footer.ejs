        </main>
      </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    <!-- Custom Admin JS -->
    <script src="/assets/js/admin.js"></script>

    <!-- Sidebar Toggle Script -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Sidebar toggle functionality
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('main-content');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebarCollapseToggle = document.getElementById('sidebarCollapseToggle');
        
        // Check if sidebar is collapsed in localStorage
        if (localStorage.getItem('sidebarCollapsed') === 'true') {
          sidebar.classList.add('collapsed');
          mainContent.classList.add('ml-collapsed');
        }
        
        // Mobile sidebar toggle
        if (sidebarToggle) {
          sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('show');
          });
        }
        
        // Desktop sidebar collapse toggle
        if (sidebarCollapseToggle) {
          sidebarCollapseToggle.addEventListener('click', function() {
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('ml-collapsed');
            
            // Save state to localStorage
            localStorage.setItem('sidebarCollapsed', sidebar.classList.contains('collapsed'));
          });
        }
        
        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
          if (window.innerWidth < 768 && sidebar.classList.contains('show')) {
            if (!sidebar.contains(event.target) && event.target !== sidebarToggle) {
              sidebar.classList.remove('show');
            }
          }
        });
        
        // Status History Script
        const statusSelect = document.getElementById('status');
        const statusHistoryFields = document.getElementById('status-history-fields');
        
        if (statusSelect && statusHistoryFields) {
          const initialValue = statusSelect.getAttribute('data-initial-value');
          
          statusSelect.addEventListener('change', function() {
            if (this.value !== initialValue) {
              statusHistoryFields.classList.remove('d-none');
            } else {
              statusHistoryFields.classList.add('d-none');
            }
          });
        }
        
        // Delete shipment confirmation
        const deleteButtons = document.querySelectorAll('.delete-shipment');
        deleteButtons.forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            
            if (confirm('Are you sure you want to delete this shipment? This action cannot be undone.')) {
              fetch(`/admin/shipments/delete/${id}`, {
                method: 'DELETE'
              })
              .then(response => response.json())
              .then(data => {
                if (data.message) {
                  // Reload the page to reflect the deletion
                  window.location.reload();
                }
              })
              .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the shipment.');
              });
            }
          });
        });
        
        // Delete newsletter subscriber confirmation
        const deleteSubscriberButtons = document.querySelectorAll('.delete-subscriber');
        deleteSubscriberButtons.forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            
            if (confirm('Are you sure you want to delete this subscriber? This action cannot be undone.')) {
              fetch(`/admin/newsletter/delete/${id}`, {
                method: 'DELETE'
              })
              .then(response => response.json())
              .then(data => {
                if (data.message) {
                  // Reload the page to reflect the deletion
                  window.location.reload();
                }
              })
              .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the subscriber.');
              });
            }
          });
        });
      });
    </script>
  </body>
</html> 