<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <title><%= title %></title>

    <!-- Favicon -->
    <link
      rel="shortcut icon"
      href="/assets/images/favicon.ico"
      type="image/x-icon"
    />

    <!--Start css files-->
    <link
      rel="stylesheet preload"
      href="/assets/css/font-awesome-pro.css"
      as="style"
    />
    <link
      rel="stylesheet preload"
      href="/assets/css/bootstrap.min.css"
      as="style"
    />
    <link rel="stylesheet preload" href="/assets/css/swiper.css" as="style" />
    <link
      rel="stylesheet preload"
      href="/assets/css/nice-select.css"
      as="style"
    />
    <link rel="stylesheet preload" href="/assets/css/animate.css" as="style" />
    <link
      rel="stylesheet preload"
      href="/assets/css/odometer-theme-default.min.css"
      as="style"
    />
    <link
      rel="stylesheet preload"
      href="/assets/css/magnific-popup.css"
      as="style"
    />
    <link
      rel="stylesheet preload"
      href="/assets/css/franchise.css"
      as="style"
    />
    <link rel="stylesheet preload" href="/assets/css/style.css" as="style" />
    <link rel="stylesheet preload" href="/assets/css/toast.css" as="style" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/wowjs@1.1.3/css/libs/animate.min.css"
    />
    <!-- End Css File -->

    <!-- Additional CSS for specific pages -->
    <% if (typeof extraCSS !== 'undefined') { %> <%- extraCSS %> <% } %>

    <!-- Start Favicon-->
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/assets/images/favicon.png"
    />
    <!-- End Favicon -->

    <style>
      /* Add toast notification styling */
      .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
      }

      .toast {
        min-width: 300px;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateX(100%);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
      }

      .toast.show {
        transform: translateX(0);
        opacity: 1;
      }

      .toast.success {
        background-color: #ebf7ee;
        border-left: 4px solid #34c759;
      }

      .toast.error {
        background-color: #feecf0;
        border-left: 4px solid #ff3b30;
      }

      .toast-content {
        display: flex;
        align-items: center;
      }

      .toast-icon {
        margin-right: 12px;
        font-size: 18px;
      }

      .toast.success .toast-icon {
        color: #34c759;
      }

      .toast.error .toast-icon {
        color: #ff3b30;
      }

      .toast-message {
        font-size: 14px;
        font-weight: 500;
        color: #333;
      }
    </style>
  </head>
  <body>
    <!-- Start Site Preloader -->
    <div id="trucker__preloader">
      <div id="trucker__circle_loader"></div>
      <div class="trucker__loader_logo">
        <img src="/assets/images/logo/logo.png" alt="Preload" />
      </div>
    </div>
    <!-- End Site Preloader -->

    <!-- Start Scroll To Top Here  -->
    <div class="scroll-up">
      <svg
        class="scroll-circle svg-content"
        width="100%"
        height="100%"
        viewBox="-1 -1 102 102"
      >
        <path d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98" />
      </svg>
    </div>
    <!-- End Scroll To Top Here -->

    <!-- Header -->
    <%- include ../partials/navbar %>

    <!-- Main Content -->
    <main><%- body %></main>

    <!-- Footer -->
    <%- include ../partials/footer %>

    <!-- Start Overlay Add -->
    <div class="trucker__overlay"></div>
    <!-- End Overlay Add -->

    <!--Start Js Files-->
    <!-- Bootstrap from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/wowjs@1.1.3/dist/wow.min.js"></script>

    <!-- Only include the JS files that actually exist in our project -->
    <script defer src="/assets/js/magnific-popup.js"></script>
    <script defer src="/assets/js/nice-select.js"></script>
    <script defer src="/assets/js/swiper.js"></script>
    <script defer src="/assets/js/odometer.min.js"></script>
    <script defer src="/assets/js/jarallax.min.js"></script>
    <script defer src="/assets/js/imagesloaded-pkgd.js"></script>
    <script defer src="/assets/js/script.js"></script>

    <!-- End Js File -->

    <!-- Additional JS for specific pages -->
    <% if (typeof extraJS !== 'undefined') { %> <%- extraJS %> <% } %>

    <!-- Fix for WOW.js animations -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Wait for the main JavaScript to initialize
        setTimeout(function () {
          // Force all fade-up elements to be visible
          document.querySelectorAll(".fade-up").forEach(function (el) {
            el.style.opacity = "1";
            el.style.visibility = "visible";
            el.style.transform = "translateY(0)";
            el.classList.add("active");
          });

          // Initialize counter animations for the stats
          document.querySelectorAll(".stat-number").forEach(function (counter) {
            const target = parseInt(counter.getAttribute("data-count"), 10);
            if (target) {
              // Set initial value to 0
              counter.textContent = "0";

              // Create animation effect
              let current = 0;
              const increment = target / 50; // Divide animation into 50 steps
              const timer = setInterval(function () {
                current += increment;
                counter.textContent = Math.round(Math.min(current, target));
                if (current >= target) {
                  clearInterval(timer);
                }
              }, 30);
            }
          });
        }, 1000); // Give the main JS time to initialize
      });
    </script>
    <script>
      function submitContactForm() {
        const form = document.getElementById("contactForm");
        const submitButton = document.getElementById("contactSubmitButton");
        const submitText = document.getElementById("contactSubmitText");
        const submitSpinner = document.getElementById("contactSubmitSpinner");
        const errorMessage = document.getElementById("contactErrorMessage");
        const errorText = document.getElementById("contactErrorText");

        // Check form validity
        if (!form.checkValidity()) {
          form.reportValidity();
          return;
        }

        // Disable submit button and show spinner
        submitButton.disabled = true;
        submitText.textContent = "Sending...";
        submitSpinner.classList.remove("d-none");
        errorMessage.classList.add("d-none");

        const formData = {
          name: document.getElementById("contactName").value,
          email: document.getElementById("contactEmail").value,
          phone: document.getElementById("contactPhone").value,
          message: document.getElementById("contactMessage").value,
        };

        fetch("/franchise/submit-contact", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Show toast if available
              if (typeof showToast === "function") {
                showToast("Message sent successfully!", "success");
              }

              // Reset form and close modal
              form.reset();
              bootstrap.Modal.getInstance(
                document.getElementById("contactModal")
              ).hide();
            } else {
              throw new Error(data.message || "Failed to send message");
            }
          })
          .catch((error) => {
            console.error("Error sending message:", error);
            errorText.textContent = error.message || "Error sending message";
            errorMessage.classList.remove("d-none");

            // Show toast if available
            if (typeof showToast === "function") {
              showToast("Error sending message. Please try again.", "error");
            }
          })
          .finally(() => {
            // Re-enable submit button and hide spinner
            submitButton.disabled = false;
            submitText.textContent = "Send Message";
            submitSpinner.classList.add("d-none");
          });
      }
    </script>
    <script>
      function submitFranchiseForm() {
        const form = document.getElementById("franchiseForm");
        const submitButton = document.getElementById("submitButton");
        const submitText = document.getElementById("submitButtonText");
        const submitSpinner = document.getElementById("submitSpinner");
        const successMessage = document.getElementById("successMessage");
        const errorMessage = document.getElementById("errorMessage");
        const errorText = document.getElementById("errorText");

        // Check form validity
        if (!form.checkValidity()) {
          form.reportValidity();
          return;
        }

        // Disable submit button and show spinner
        submitButton.disabled = true;
        submitText.textContent = "Submitting...";
        submitSpinner.classList.remove("d-none");
        errorMessage.classList.add("d-none");
        successMessage.classList.add("d-none");

        const formData = {
          firstName: document.getElementById("firstName").value,
          lastName: document.getElementById("lastName").value,
          email: document.getElementById("email").value,
          phone: document.getElementById("phone").value,
          location: document.getElementById("location").value,
          investment: document.getElementById("investment").value,
          experience: document.getElementById("experience").value,
          timeline: document.getElementById("timeline").value,
        };

        fetch("/franchise/submit-application", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Show success message
              successMessage.classList.remove("d-none");

              // Show toast if available
              if (typeof showToast === "function") {
                showToast("Application submitted successfully!", "success");
              }

              // Reset form
              form.reset();
            } else {
              throw new Error(data.message || "Failed to submit application");
            }
          })
          .catch((error) => {
            console.error("Error submitting application:", error);
            errorText.textContent =
              error.message || "Error submitting application";
            errorMessage.classList.remove("d-none");

            // Show toast if available
            if (typeof showToast === "function") {
              showToast(
                "Error submitting application. Please try again.",
                "error"
              );
            }
          })
          .finally(() => {
            // Re-enable submit button and hide spinner
            submitButton.disabled = false;
            submitText.textContent = "Submit Application";
            submitSpinner.classList.add("d-none");
          });
      }
    </script>
    <script>
      // Check if document has loaded properly
      console.log("DOM fully loaded for franchise page");

      // Create toast container if it doesn't exist
      function createToastContainer() {
        if (!document.getElementById("toast-container")) {
          const toastContainer = document.createElement("div");
          toastContainer.id = "toast-container";
          toastContainer.className = "toast-container";
          document.body.appendChild(toastContainer);
        }
        return document.getElementById("toast-container");
      }

      // Show toast notification
      function showToast(message, type = "success") {
        const container = createToastContainer();
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.innerHTML = `
          <div class="toast-content">
            <i class="fas ${
              type === "success" ? "fa-check-circle" : "fa-exclamation-circle"
            } toast-icon"></i>
            <span class="toast-message">${message}</span>
          </div>
        `;
        container.appendChild(toast);
        setTimeout(() => {
          toast.classList.add("show");
        }, 100);
        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }

      // Animate the stat numbers when document is ready
      document.addEventListener("DOMContentLoaded", function () {
        // Animate stats when in viewport
        const stats = document.querySelectorAll(".stat-number");
        stats.forEach((stat) => {
          const targetValue = parseInt(stat.getAttribute("data-count"));
          let currentValue = 0;
          const duration = 2000; // milliseconds
          const increment = targetValue / (duration / 16);

          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const timer = setInterval(() => {
                    currentValue += increment;
                    if (currentValue >= targetValue) {
                      clearInterval(timer);
                      currentValue = targetValue;
                    }
                    stat.textContent = Math.round(currentValue);
                  }, 16);
                  observer.unobserve(entry.target);
                }
              });
            },
            { threshold: 0.5 }
          );

          observer.observe(stat);
        });
      });
    </script>
    <script>
      // Check if document has loaded properly
      console.log("DOM fully loaded for franchise page");

      // Create toast container if it doesn't exist
      function createToastContainer() {
        if (!document.getElementById("toast-container")) {
          const toastContainer = document.createElement("div");
          toastContainer.id = "toast-container";
          toastContainer.className = "toast-container";
          document.body.appendChild(toastContainer);
        }
        return document.getElementById("toast-container");
      }

      // Show toast notification
      function showToast(message, type = "success") {
        const container = createToastContainer();
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.innerHTML = `
          <div class="toast-content">
            <i class="fas ${
              type === "success" ? "fa-check-circle" : "fa-exclamation-circle"
            } toast-icon"></i>
            <span class="toast-message">${message}</span>
          </div>
        `;
        container.appendChild(toast);
        setTimeout(() => {
          toast.classList.add("show");
        }, 100);
        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }

      // Animate the stat numbers when document is ready
      document.addEventListener("DOMContentLoaded", function () {
        // Animate stats when in viewport
        const stats = document.querySelectorAll(".stat-number");
        stats.forEach((stat) => {
          const targetValue = parseInt(stat.getAttribute("data-count"));
          let currentValue = 0;
          const duration = 2000; // milliseconds
          const increment = targetValue / (duration / 16);

          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const timer = setInterval(() => {
                    currentValue += increment;
                    if (currentValue >= targetValue) {
                      clearInterval(timer);
                      currentValue = targetValue;
                    }
                    stat.textContent = Math.round(currentValue);
                  }, 16);
                  observer.unobserve(entry.target);
                }
              });
            },
            { threshold: 0.5 }
          );

          observer.observe(stat);
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // DOM Elements
        const form = document.getElementById("shipment-form");
        const progressBar = document.getElementById("progress-bar");
        const steps = document.querySelectorAll(".step-form");
        const progressSteps = document.querySelectorAll(".progress-step");
        const successMessage = document.getElementById("success-message");
        const trackButton = document.getElementById("track-shipment-btn");

        // Initialize track button with a placeholder
        trackButton.href = "/shipment/track";

        // Current step tracking
        let currentStep = 1;
        const totalSteps = steps.length;

        // Initialize form
        updateProgressBar();

        // Navigation buttons
        document
          .getElementById("btn-step-1")
          .addEventListener("click", () => nextStep(2));
        document
          .getElementById("btn-step-2")
          .addEventListener("click", () => nextStep(3));
        document
          .getElementById("btn-step-3")
          .addEventListener("click", () => nextStep(4));
        document
          .getElementById("btn-step-4")
          .addEventListener("click", () => nextStep(5));

        document
          .getElementById("btn-back-1")
          .addEventListener("click", () => prevStep(1));
        document
          .getElementById("btn-back-2")
          .addEventListener("click", () => prevStep(2));
        document
          .getElementById("btn-back-3")
          .addEventListener("click", () => prevStep(3));
        document
          .getElementById("btn-back-4")
          .addEventListener("click", () => prevStep(4));

        // Same as origin address checkbox
        const sameAsOriginCheckbox = document.getElementById("same-as-origin");
        const destinationFields = document.getElementById(
          "destination-address-fields"
        );

        sameAsOriginCheckbox.addEventListener("change", function () {
          if (this.checked) {
            destinationFields.style.display = "none";

            // Copy values from origin to destination
            document.getElementById("destination-address").value =
              document.getElementById("origin-address").value;
            document.getElementById("destination-city").value =
              document.getElementById("origin-city").value;
            document.getElementById("destination-postal-code").value =
              document.getElementById("origin-postal-code").value;
            document.getElementById("destination-state").value =
              document.getElementById("origin-state").value;
            document.getElementById("destination-country").value =
              document.getElementById("origin-country").value;
          } else {
            destinationFields.style.display = "block";
          }
        });

        // Insurance checkbox toggle
        const insuranceCheckbox = document.getElementById("insurance");
        const insuranceValueGroup = document.getElementById(
          "insurance-value-group"
        );

        insuranceCheckbox.addEventListener("change", function () {
          insuranceValueGroup.classList.toggle("hidden", !this.checked);

          if (currentStep === 5) {
            updateOrderSummary();
          }
        });

        // Payment method toggle
        const paymentMethods = document.querySelectorAll(".payment-method");
        const cardFields = document.getElementById("card-payment-fields");
        const paypalFields = document.getElementById("paypal-payment-fields");
        const cardInputs = cardFields.querySelectorAll("input");

        paymentMethods.forEach((method) => {
          method.addEventListener("click", function () {
            const methodType = this.getAttribute("data-method");

            // Update radio button
            this.querySelector('input[type="radio"]').checked = true;

            // Toggle selected class
            paymentMethods.forEach((m) => m.classList.remove("selected"));
            this.classList.add("selected");

            // Show/hide appropriate fields
            if (methodType === "card") {
              cardFields.style.display = "block";
              paypalFields.style.display = "none";

              // Make card fields appear required with styling but don't add the attribute yet
              cardInputs.forEach((input) => {
                input.classList.add("card-required");
              });
            } else if (methodType === "paypal") {
              cardFields.style.display = "none";
              paypalFields.style.display = "block";

              // Remove any validation styling for card fields
              cardInputs.forEach((input) => {
                input.classList.remove("is-invalid", "card-required");
                const feedbackEl = input.nextElementSibling;
                if (
                  feedbackEl &&
                  feedbackEl.classList.contains("invalid-feedback")
                ) {
                  feedbackEl.style.display = "none";
                }
              });
            }
          });
        });

        // Shipping options
        const shippingOptions = document.querySelectorAll(".shipping-option");

        shippingOptions.forEach((option) => {
          option.addEventListener("click", function () {
            const radio = this.querySelector('input[type="radio"]');
            radio.checked = true;

            shippingOptions.forEach((opt) => opt.classList.remove("selected"));
            this.classList.add("selected");

            if (currentStep === 5) {
              updateOrderSummary();
            }
          });
        });

        // Saturday delivery checkbox
        const saturdayDelivery = document.getElementById("saturday-delivery");
        saturdayDelivery.addEventListener("change", function () {
          if (currentStep === 5) {
            updateOrderSummary();
          }
        });

        // Update declared value
        const declaredValue = document.getElementById("declared-value");
        declaredValue.addEventListener("input", function () {
          if (currentStep === 5) {
            updateOrderSummary();
          }
        });

        // Form submission
        form.addEventListener("submit", function (e) {
          e.preventDefault();

          // Check if terms checkbox is checked
          const termsCheckbox = document.getElementById("terms");
          if (!termsCheckbox.checked) {
            termsCheckbox.classList.add("is-invalid");
            let feedbackElement = termsCheckbox.nextElementSibling;
            if (
              !feedbackElement ||
              !feedbackElement.classList.contains("invalid-feedback")
            ) {
              feedbackElement = document.createElement("div");
              feedbackElement.className = "invalid-feedback";
              feedbackElement.textContent =
                "You must agree to the terms and conditions";
              termsCheckbox.parentNode.insertBefore(
                feedbackElement,
                termsCheckbox.nextSibling
              );
            }
            feedbackElement.style.display = "block";
            return;
          }

          // Check if PayPal is selected
          const paypalSelected =
            document.getElementById("payment-paypal").checked;

          // If card payment is selected, validate card fields
          if (!paypalSelected) {
            const cardInputs = document.querySelectorAll(
              "#card-payment-fields input"
            );
            let cardFieldsValid = true;

            cardInputs.forEach((input) => {
              // Clear previous validation
              input.classList.remove("is-invalid");
              const feedbackEl = input.nextElementSibling;
              if (
                feedbackEl &&
                feedbackEl.classList.contains("invalid-feedback")
              ) {
                feedbackEl.style.display = "none";
              }

              // Check if field is empty
              if (!input.value.trim()) {
                cardFieldsValid = false;
                input.classList.add("is-invalid");

                // Add validation message
                let feedbackElement = input.nextElementSibling;
                if (
                  !feedbackElement ||
                  !feedbackElement.classList.contains("invalid-feedback")
                ) {
                  feedbackElement = document.createElement("div");
                  feedbackElement.className = "invalid-feedback";
                  feedbackElement.textContent = "This field is required";
                  input.parentNode.insertBefore(
                    feedbackElement,
                    input.nextSibling
                  );
                }
                feedbackElement.style.display = "block";
              }
            });

            if (!cardFieldsValid) {
              return;
            }
          }

          // Show loading state on submit button
          const submitButton = document.getElementById("btn-submit");
          const submitText = document.getElementById("submit-text");
          const submitSpinner = document.getElementById("submit-spinner");

          submitButton.disabled = true;
          submitText.style.opacity = "0.6";
          submitSpinner.style.display = "inline-block";

          // Show payment processing page
          setTimeout(() => {
            // Hide current step
            steps[currentStep - 1].style.display = "none";
            document.querySelector(".progress-container").style.display =
              "none";

            // Show payment processing
            document.getElementById("payment-processing").style.display =
              "block";

            // Simulate payment processing with progress bar
            const progressBar = document.getElementById("payment-progress-bar");
            let width = 0;
            const interval = setInterval(() => {
              if (width >= 100) {
                clearInterval(interval);
                // Always show success
                showPaymentSuccess();
              } else {
                width += 3; // Slower increment for smoother progress
                progressBar.style.width = width + "%";
              }
            }, 100);
          }, 500);
        });

        // Show payment success page
        function showPaymentSuccess() {
          // Hide payment processing page
          document.getElementById("payment-processing").style.display = "none";

          // Show payment success page
          document.getElementById("payment-success").style.display = "block";

          // Add event listener to finish button
          document
            .getElementById("finish-button")
            .addEventListener("click", function () {
              createShipment();
            });
        }

        // Setup copy buttons
        function setupCopyButtons() {
          // First, remove all existing copy buttons and create new ones
          // This prevents any chance of event listeners piling up
          document.querySelectorAll(".copy-btn").forEach((button) => {
            // Create a completely new button
            const newButton = document.createElement("button");
            newButton.className = "copy-btn";
            newButton.setAttribute(
              "data-clipboard-target",
              button.getAttribute("data-clipboard-target")
            );
            newButton.innerHTML = '<i class="fa fa-copy"></i>';

            // Replace the old button with the new one
            button.parentNode.replaceChild(newButton, button);
          });

          // Now add completely fresh event listeners to the new buttons
          document.querySelectorAll(".copy-btn").forEach((button) => {
            button.addEventListener("click", function (e) {
              // Completely stop event propagation and prevent default
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();

              // Get the text to copy
              const targetId = this.getAttribute("data-clipboard-target");
              const targetEl = document.querySelector(targetId);
              if (!targetEl) return;

              const textToCopy = targetEl.textContent;
              if (!textToCopy) return;

              // Use a separate function for clipboard operations to isolate it further
              copyToClipboard(textToCopy, this);

              // Return false to prevent any other handlers from firing
              return false;
            });
          });
        }

        // Separate function to handle clipboard operations
        function copyToClipboard(text, buttonEl) {
          // Modern clipboard API
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard
              .writeText(text)
              .then(() => {
                // Show success feedback
                showToast(`Copied to clipboard: ${text}`, "success");

                // Show temporary checkmark
                const originalIcon = buttonEl.innerHTML;
                buttonEl.innerHTML = '<i class="fa fa-check"></i>';

                setTimeout(() => {
                  buttonEl.innerHTML = originalIcon;
                }, 1500);
              })
              .catch((err) => {
                console.error("Failed to copy text: ", err);
                showToast("Failed to copy to clipboard", "error");
              });
          } else {
            // Fallback for older browsers
            try {
              const tempInput = document.createElement("input");
              document.body.appendChild(tempInput);
              tempInput.value = text;
              tempInput.select();

              const success = document.execCommand("copy");
              document.body.removeChild(tempInput);

              if (success) {
                showToast(`Copied to clipboard: ${text}`, "success");

                // Show temporary checkmark
                const originalIcon = buttonEl.innerHTML;
                buttonEl.innerHTML = '<i class="fa fa-check"></i>';

                setTimeout(() => {
                  buttonEl.innerHTML = originalIcon;
                }, 1500);
              } else {
                showToast("Failed to copy to clipboard", "error");
              }
            } catch (err) {
              console.error("Failed to copy text: ", err);
              showToast("Failed to copy to clipboard", "error");
            }
          }
        }

        // Show toast notification
        function showToast(message, type = "info") {
          // Create toast container if it doesn't exist
          let toastContainer = document.querySelector(".toast-container");
          if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className =
              "toast-container position-fixed bottom-0 end-0 p-3";
            document.body.appendChild(toastContainer);
          }

          // Create toast element
          const toastEl = document.createElement("div");
          toastEl.className = `toast align-items-center text-white bg-${
            type === "error"
              ? "danger"
              : type === "success"
              ? "success"
              : "primary"
          } border-0`;
          toastEl.setAttribute("role", "alert");
          toastEl.setAttribute("aria-live", "assertive");
          toastEl.setAttribute("aria-atomic", "true");

          // Toast content
          toastEl.innerHTML = `
            <div class="d-flex">
              <div class="toast-body">
                ${message}
              </div>
              <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
          `;

          // Add toast to container
          toastContainer.appendChild(toastEl);

          // Initialize and show the toast using Bootstrap if available
          if (typeof bootstrap !== "undefined" && bootstrap.Toast) {
            const toast = new bootstrap.Toast(toastEl, {
              autohide: true,
              delay: 3000,
            });
            toast.show();
          } else {
            // Simple fallback if Bootstrap is not available
            toastEl.style.display = "block";
            setTimeout(() => {
              toastEl.style.opacity = "0";
              toastEl.style.transition = "opacity 0.5s ease";
              setTimeout(() => {
                toastEl.remove();
              }, 500);
            }, 3000);
          }
        }

        // Create shipment
        function createShipment() {
          // Show loading state on finish button
          const finishButton = document.getElementById("finish-button");
          const finishText = document.getElementById("finish-text");
          const finishSpinner = document.getElementById("finish-spinner");

          finishButton.disabled = true;
          finishText.style.opacity = "0.6";
          finishSpinner.style.display = "inline-block";

          try {
            // Generate a shipment ID for immediate display
            // But we'll use the backend's tracking ID once we get a response
            const timestamp = Date.now();
            const randomPartShipment = Math.floor(Math.random() * 10000000)
              .toString()
              .padStart(7, "0");
            const tempShipmentId = `SH${timestamp}${randomPartShipment}`;

            // Set temporary shipment ID value - will be updated with real value from server
            document.getElementById("shipment-id").textContent = tempShipmentId;
            document.getElementById("tracking-number").textContent =
              "Processing...";

            // Create the shipment data object
            const shipmentData = {
              // Customer info
              customerName: `${document.getElementById("first-name").value} ${
                document.getElementById("last-name").value
              }`,
              customerEmail:
                document.getElementById("email").value ||
                "customer@example.com",
              customerPhone: document.getElementById("phone").value || "N/A",
              company: document.getElementById("company").value || "Personal",
              reference:
                document.getElementById("reference").value || "Auto-generated",

              // Origins and destination
              origin: `${document.getElementById("origin-address").value}, ${
                document.getElementById("origin-city").value
              }, ${document.getElementById("origin-country").value}`,
              destination: `${
                document.getElementById("destination-address").value
              }, ${document.getElementById("destination-city").value}, ${
                document.getElementById("destination-country").value
              }`,

              // Package details
              packageType:
                document.getElementById("package-type").value || "standard",
              weight:
                parseFloat(document.getElementById("weight").value) || 1.0,
              dimensions: {
                length:
                  parseFloat(document.getElementById("length").value) || 10,
                width: parseFloat(document.getElementById("width").value) || 10,
                height:
                  parseFloat(document.getElementById("height").value) || 10,
              },
              contents:
                document.getElementById("contents").value ||
                "General merchandise",
              fragile: document.getElementById("fragile").checked,
              insuranceIncluded: document.getElementById("insurance").checked,
              declaredValue: document.getElementById("insurance").checked
                ? parseFloat(document.getElementById("declared-value").value) ||
                  0
                : 0,

              // Shipping options
              carrier: document.querySelector(
                'input[name="shipping-method"]:checked'
              ).value,
              expressDelivery:
                document.querySelector('input[name="shipping-method"]:checked')
                  .value === "express",
              saturdayDelivery:
                document.getElementById("saturday-delivery").checked,

              // Payment info
              paymentMethod: document.querySelector(
                'input[name="payment-method"]:checked'
              ).value,

              // Calculate estimated delivery date (5 days from now)
              estimatedDelivery: new Date(
                Date.now() + 5 * 24 * 60 * 60 * 1000
              ).toISOString(),

              // Status
              status: "processing",
            };

            // First hide the payment success page
            document.getElementById("payment-success").style.display = "none";

            // Show the success message with the temporary tracking IDs
            successMessage.style.display = "block";

            // Set up the copy buttons for the IDs
            setupCopyButtons();

            // Then send data to the server
            fetch("/shipment/create", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(shipmentData),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(
                    `Server responded with status: ${response.status}`
                  );
                }
                return response.json();
              })
              .then((data) => {
                if (data.success) {
                  // Update the tracking number with the server-generated one
                  document.getElementById("tracking-number").textContent =
                    data.trackingId;
                  document.getElementById("shipment-id").textContent =
                    data.shipmentId;

                  // Update the tracking button href with the tracking ID
                  const trackButton =
                    document.getElementById("track-shipment-btn");
                  trackButton.href = `/shipment/track?id=${data.trackingId}`;

                  // Show success toast
                  showToast("Shipment created successfully!", "success");

                  // Re-setup copy buttons with updated values
                  setupCopyButtons();
                } else {
                  // Show warning toast but we already have the IDs displayed
                  showToast(
                    data.message ||
                      "Server had issues creating your shipment, but your shipment details are available.",
                    "error"
                  );
                }
              })
              .catch((error) => {
                console.error("Error creating shipment:", error);

                // Update the tracking number to indicate error
                document.getElementById("tracking-number").textContent =
                  "Error - Please try again";

                // Update the track button to point to the normal track page
                const trackButton =
                  document.getElementById("track-shipment-btn");
                trackButton.href = `/shipment/track`;

                // Show error toast with more details
                showToast(
                  "Error creating shipment. Please refresh and try again or contact support.",
                  "error"
                );
              })
              .finally(() => {
                // Reset button state
                finishButton.disabled = false;
                finishText.style.opacity = "1";
                finishSpinner.style.display = "none";
              });
          } catch (error) {
            console.error("Error in createShipment function:", error);

            // Show error toast
            showToast(
              "An unexpected error occurred. Please try again.",
              "error"
            );

            // Reset button state
            finishButton.disabled = false;
            finishText.style.opacity = "1";
            finishSpinner.style.display = "none";
          }
        }

        // Functions
        function nextStep(step) {
          if (validateStep(currentStep)) {
            steps[currentStep - 1].classList.remove("active");
            steps[step - 1].classList.add("active");
            currentStep = step;
            updateProgressBar();

            if (currentStep === 5) {
              updateOrderSummary();
            }

            // Scroll to top of form
            document
              .querySelector(".card")
              .scrollIntoView({ behavior: "smooth" });
          }
        }

        function prevStep(step) {
          steps[currentStep - 1].classList.remove("active");
          steps[step - 1].classList.add("active");
          currentStep = step;
          updateProgressBar();

          // Scroll to top of form
          document
            .querySelector(".card")
            .scrollIntoView({ behavior: "smooth" });
        }

        function updateProgressBar() {
          const percent = ((currentStep - 1) / (totalSteps - 1)) * 100;
          progressBar.style.width = `${percent}%`;

          // Update progress steps
          progressSteps.forEach((step, index) => {
            const stepNum = index + 1;

            if (stepNum < currentStep) {
              step.classList.add("completed");
              step.classList.remove("active");
            } else if (stepNum === currentStep) {
              step.classList.add("active");
              step.classList.remove("completed");
            } else {
              step.classList.remove("active", "completed");
            }
          });
        }

        function validateStep(step) {
          const currentStepEl = steps[step - 1];
          const requiredFields = currentStepEl.querySelectorAll(
            '[required]:not([type="hidden"])'
          );
          let isValid = true;

          requiredFields.forEach((field) => {
            // Reset validation state
            field.classList.remove("is-invalid");
            const feedbackEl = field.nextElementSibling;
            if (
              feedbackEl &&
              feedbackEl.classList.contains("invalid-feedback")
            ) {
              feedbackEl.style.display = "none";
            }

            if (!field.checkValidity()) {
              isValid = false;
              field.classList.add("is-invalid");

              // Add validation message if not already present
              let feedbackElement = field.nextElementSibling;
              if (
                !feedbackElement ||
                !feedbackElement.classList.contains("invalid-feedback")
              ) {
                feedbackElement = document.createElement("div");
                feedbackElement.className = "invalid-feedback";
                feedbackElement.textContent =
                  field.validationMessage || "This field is required";
                field.parentNode.insertBefore(
                  feedbackElement,
                  field.nextSibling
                );
              }

              feedbackElement.style.display = "block";
            }
          });

          return isValid;
        }

        function updateOrderSummary() {
          // Get selected shipping method
          const selectedShipping = document.querySelector(
            'input[name="shipping-method"]:checked'
          );
          if (!selectedShipping) return;

          const shippingMethod = selectedShipping.value;
          const shippingPrice = parseFloat(
            selectedShipping.getAttribute("data-price")
          );

          // Calculate additional services
          const saturdayDelivery =
            document.getElementById("saturday-delivery").checked;
          const saturdayPrice = saturdayDelivery ? 12.5 : 0;

          // Calculate insurance if checked
          const insurance = document.getElementById("insurance").checked;
          let insurancePrice = 0;

          if (insurance) {
            const declaredValue =
              parseFloat(document.getElementById("declared-value").value) || 0;
            insurancePrice = declaredValue * 0.02; // 2% of declared value
          }

          // Calculate subtotal and VAT
          const subtotal = shippingPrice + saturdayPrice + insurancePrice;
          const vat = subtotal * 0.2; // 20% VAT
          const total = subtotal + vat;

          // Update summary
          document.getElementById("summary-service").textContent =
            shippingMethod.charAt(0).toUpperCase() +
            shippingMethod.slice(1) +
            " Delivery";
          document.getElementById(
            "summary-shipping"
          ).textContent = `£${shippingPrice.toFixed(2)}`;

          // Show/hide Saturday delivery row
          const saturdayRow = document.getElementById("summary-row-saturday");
          saturdayRow.style.display = saturdayDelivery ? "flex" : "none";

          // Show/hide insurance row
          const insuranceRow = document.getElementById("summary-row-insurance");
          insuranceRow.style.display = insurance ? "flex" : "none";
          document.getElementById(
            "summary-insurance"
          ).textContent = `£${insurancePrice.toFixed(2)}`;

          document.getElementById("summary-vat").textContent = `£${vat.toFixed(
            2
          )}`;
          document.getElementById(
            "summary-total"
          ).textContent = `£${total.toFixed(2)}`;
        }

        // Initialize first shipping option as selected
        if (shippingOptions.length > 0) {
          shippingOptions[0].click();
        }

        // Initialize first payment method as selected
        if (paymentMethods.length > 0) {
          paymentMethods[0].classList.add("selected");
        }
      });
    </script>
    <!-- Tracking Form Script -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const trackingForm = document.getElementById("tracking-form");
        const trackingInput = document.getElementById("trackingNumber");
        const resultSection = document.querySelector(
          ".tracking-result-section"
        );
        const submitButton = document.querySelector(".track-button");
        const originalButtonText = submitButton.textContent;

        // Initially hide result section
        resultSection.style.display = "none";

        // Setup copy buttons if shipment is displayed
        setupCopyButtons();

        trackingForm.addEventListener("submit", function (e) {
          e.preventDefault();

          const trackingNumber = trackingInput.value.trim();

          if (!trackingNumber) {
            trackingInput.classList.add("error");
            return;
          }

          // Update button state
          submitButton.disabled = true;
          submitButton.textContent = "Searching...";

          // Fetch shipment details from server
          fetch(`/shipment/track?id=${trackingNumber}`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Shipment not found");
              }
              return response.text();
            })
            .then((html) => {
              // Redirect to the track result page
              window.location.href = `/shipment/track?id=${trackingNumber}`;
            })
            .catch((error) => {
              console.error("Error tracking shipment:", error);
              showToast(
                "Shipment not found. Please check the tracking number.",
                "error"
              );
            })
            .finally(() => {
              // Reset button state
              submitButton.disabled = false;
              submitButton.textContent = originalButtonText;
            });
        });

        /**
         * Setup copy buttons functionality
         */
        function setupCopyButtons() {
          const copyButtons = document.querySelectorAll(".copy-btn");

          copyButtons.forEach((button) => {
            // Remove existing listeners to prevent duplicates
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            newButton.addEventListener("click", function () {
              // Find the text to copy (tracking number in this case)
              const textElement =
                this.previousElementSibling.querySelector("h3");
              if (!textElement) return;

              const textToCopy = textElement.textContent.trim();

              // Copy to clipboard
              navigator.clipboard
                .writeText(textToCopy)
                .then(() => {
                  // Visual feedback
                  this.innerHTML = '<i class="fa-light fa-check"></i>';
                  setTimeout(() => {
                    this.innerHTML = '<i class="fa-light fa-copy"></i>';
                  }, 1500);

                  showToast("Tracking number copied to clipboard!", "success");
                })
                .catch((err) => {
                  console.error("Failed to copy text: ", err);
                  showToast("Failed to copy text", "error");
                });
            });
          });
        }

        /**
         * Show a toast notification
         * @param {string} message - The message to display
         * @param {string} type - The type of toast (success, error, info)
         */
        function showToast(message, type = "info") {
          // Create toast container if it doesn't exist
          let toastContainer = document.querySelector(".toast-container");
          if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container";
            document.body.appendChild(toastContainer);
          }

          // Create toast element
          const toast = document.createElement("div");
          toast.className = `toast ${type}`;
          toast.textContent = message;

          // Add to container
          toastContainer.appendChild(toast);

          // Remove after delay
          setTimeout(() => {
            toast.style.animation = "fadeOut 0.3s ease forwards";
            setTimeout(() => {
              toastContainer.removeChild(toast);
            }, 300);
          }, 3000);
        }
      });
    </script>
  </body>
</html>
